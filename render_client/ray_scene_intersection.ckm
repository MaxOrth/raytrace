
// uv coordinate detail: (1-u-v)*a + u*b + u*c
int intersect_ray_triangle(VEC3 a, VEC3 b, VEC3 c, struct Ray r, struct vec2 *uvout, float *tout)
{
  VEC3 e1;
  VEC3 e2;

  VEC3 P;
  VEC3 Q;
  VEC3 T;
  struct vec2 uv;

  float det;
  float det_inv;
  float t;

  e1 = b - a;
  e2 = c - a;
  P = cross(r.dir, e2);

  det = dot(e1, P);
  if (NEAR_ZERO(det))
    return 0;

  det_inv = 1.f / det;

  T = r.origin - a;

  uv.u = dot(T, P) * det_inv;
  if (uv.u < 0.f || uv.u > 1.f)
    return 0;

  Q = cross(T, e1);

  uv.v = dot(r.dir, Q) * det_inv;
  if (uv.v < 0.f || uv.v + uv.u > 1.f)
    return 0;

  t = dot(e2, Q) * det_inv;

  if (t > EPSILON)
  {
    *tout = t;
    *uvout = uv;
    return 1;
  }

  return 0;

}

int intersect_ray_aabb(AABB aabb, struct Ray ray, float *t)
{
  float3 dir_inv = { 1 / ray.dir.x, 1 / ray.dir.y, 1 / ray.dir.z };

  float t1 = (aabb.a.x - ray.origin.x) * dir_inv.x;
  float t2 = (aabb.b.x - ray.origin.x) * dir_inv.x;
  float tmin = fmin(t1, t2);
  float tmax = fmax(t1, t2);

  t1 = (aabb.a.y - ray.origin.y) * dir_inv.y;
  t2 = (aabb.b.y - ray.origin.y) * dir_inv.y;
  tmin = fmax(tmin, fmin(t1, t2));
  tmax = fmin(tmax, fmax(t1, t2));

  t1 = (aabb.a.z - ray.origin.z) * dir_inv.z;
  t2 = (aabb.b.z - ray.origin.z) * dir_inv.z;
  tmin = fmax(tmin, fmin(t1, t2));
  tmax = fmin(tmax, fmax(t1, t2));

  *t = tmin;
  return tmax > fmax(tmin, 0);
}


void ray_leaf_intersection(
  CBVH_GPTR leaf, 
  struct Ray ray, 
  float3 __constant *vert_buff, 
  uint8 __constant *ind_buff, 
  struct vec2 *uvout, 
  float *t_update,
  unsigned *tri_ind_update
)
{
  float t_tmp;
  struct vec2 uv;
  for (unsigned j = 0; j < leaf->node.leaf.count; ++j)
  {
    uint3 tri_index = ind_buff[leaf->node.leaf.tris[j]].s012;
    float3 a = vert_buff[tri_index.x];
    float3 b = vert_buff[tri_index.y];
    float3 c = vert_buff[tri_index.z];
    //  VEC3 const a, VEC3 const b, VEC3 const c, struct Ray const r, struct vec2 *uvout, float *tout
    if (
      intersect_ray_triangle(
        a,
        b,
        c,
        ray,
        &uv,
        &t_tmp
      ) // v1, v2, v3, ray, &uv, &t_tmp) 
      && t_tmp < *t_update)
    {
      *t_update = t_tmp;
      *uvout = uv;
      *tri_ind_update = leaf->node.leaf.tris[j];
    }
  }
}


unsigned near_child_impl(unsigned i, CentroidBVHNode __constant *accel, struct Ray ray)
{
  // test is 1 if in same direction
  unsigned test = dot(ray.dir, accel[i].node.inner.plane_norm) > 0;
  return accel[i].node.inner.children_index[test];
}

//unsigned far_child_impl(unsigned i, __global __read_only CentroidBVHNode *accel, struct Ray ray)
//{
//  unsigned test = dot(ray.dir, accel[i].node.inner.plane_norm) <= 0;
//  return accel[i].node.inner.children_index[test];
//}

unsigned parent_impl(unsigned i, CentroidBVHNode __constant *accel)
{
  return accel[i].parent_index;
}

unsigned sibling_impl(unsigned i, CentroidBVHNode __constant *accel)
{
  // if i is same index as 0th child, it becomes 1 which is the index of the other child
  unsigned test = accel[accel[i].parent_index].node.inner.children_index[0] == i;
  return accel[accel[i].parent_index].node.inner.children_index[test];
}

#define nearChild(i, r) (near_child_impl((i), accel, (r)))
#define farChild(i, r) (far_child_impl((i), accel, (r)))
#define parent(i) (parent_impl((i), accel))
#define sibling(i) (sibling_impl((i), accel))

enum TraverseState
{
  tsFromParent,
  tsFromSibling,
  tsFromChild
};

struct RaySceneIntersection
{
  unsigned triangle;
  float2 uv;
};

void intersect_ray_scene(struct Ray ray, CentroidBVHNode __constant *accel, uint8 __constant *indices, float4 __constant *vertices, RaySceneIntersection *out)
{
  // stackless bvh traversal from https://graphics.cg.uni-saarland.de/2011/hapalasccg2011/
  bool go = true;
  enum TraverseState traverse_state = tsFromParent;
  unsigned curr_node = nearChild(0, ray);
  // t for aabb intersection. not used yet
  float t_quit_early;
  float t_near = MAXFLOAT;
  float t_tmp = 0;
  out->uv = (float2)(0,0);
  out->triangle = ~0;
  
  do
  {
    if (traverse_state == tsFromChild)
    {
      // root is index 0
      if (curr_node == 0)
      {
        go = false;
      }
      else if (curr_node == nearChild(parent(curr_node), ray))
      {
        curr_node = sibling(curr_node);
        traverse_state = tsFromSibling;
      }
      else
      {
        curr_node = parent(curr_node);
        traverse_state = tsFromChild;
      }
    }
    else if (traverse_state == tsFromSibling)
    {
      if (!intersect_ray_aabb(accel[curr_node].aabb, ray, &t_quit_early) || t_quit_early > t_near)
      {
        curr_node = parent(curr_node);
        traverse_state = tsFromChild;
      }
      else if (accel[curr_node].type == cbvhLEAF)
      {
        //color.y += COLOR_INCR;
        ray_leaf_intersection(
          accel + curr_node,
          ray,
          vert_buff,
          ind_buff,
          &(out->uv),
          &t_near,
          &(out->triangle)
        );

        curr_node = parent(curr_node);
        traverse_state = tsFromChild;
      }
      else
      {
        //color.z += COLOR_INCR;
        curr_node = nearChild(curr_node, ray);
        traverse_state = tsFromParent;
      }
    }
    else if (traverse_state == tsFromParent)
    {
      if (!intersect_ray_aabb(accel[curr_node].aabb, ray, &t_quit_early) || t_quit_early > t_near)
      {
        curr_node = sibling(curr_node);
        traverse_state = tsFromSibling;
      }
      else if (accel[curr_node].type == cbvhLEAF)
      {
        //color.y += COLOR_INCR;
        ray_leaf_intersection(
          accel + curr_node,
          ray,
          vert_buff,
          ind_buff,
          &(out->uv),
          &t_near,
          &(out->triangle)
        );
        curr_node = sibling(curr_node);
        traverse_state = tsFromSibling;
      }
      else
      {
        //color.z += COLOR_INCR;
        curr_node = nearChild(curr_node, ray);
        traverse_state = tsFromParent;
      }
    }
  } while (go);
}
